//
//  AlbumDetailsViewController.swift
//  ItunesSearcher
//
//  Created by Михаил Звягинцев on 26.10.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AlbumDetailsDisplayLogic: AnyObject {

    func displayAlbumDetails(viewModel: AlbumDetails.ShowAlbumDetails.ViewModel)
    func displayAlbumImage(imageData: Data)
    func displayDefaultImage()
    func displayAlert(with text: String)
}

class AlbumDetailsViewController: UIViewController {

    var interactor: AlbumDetailsBusinessLogic?

    private var tableView = UITableView()
    private var activityIndicator = UIActivityIndicatorView()

    var albumID: Int!
    private var albumTitle = ""
    private var albumDescription = ""
    private var artist = ""
    private var songs: [String] = []
    private var albumImage: UIImage?

    private let standartCellID = "cell"
    private let detailsCellID = "details"

    override func viewDidLoad() {
        super.viewDidLoad()
        AlbumDetailsConfigurator.shared.configure(with: self)

        view.backgroundColor = .systemBackground

        tableView.delegate = self
        tableView.dataSource = self
        tableView.register(AlbumMainInfoCell.self, forCellReuseIdentifier: detailsCellID)
        tableView.register(UITableViewCell.self, forCellReuseIdentifier: standartCellID)

        [tableView, activityIndicator].forEach{view.addSubview($0)}

        layoutViews()
        activityIndicator.startAnimating()
        activityIndicator.hidesWhenStopped = true

        interactor?.showAlbumDetails(request: AlbumDetails.ShowAlbumDetails.Request(albumID: albumID))
    }
    
    func layoutViews() {
        [tableView, activityIndicator].forEach{$0.translatesAutoresizingMaskIntoConstraints = false}
        let tableViewConstraints = [
            tableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            tableView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),
            tableView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor),
            tableView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor)
        ]
        let activityConstraint = [
            activityIndicator.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            activityIndicator.centerYAnchor.constraint(equalTo: view.centerYAnchor),
            activityIndicator.widthAnchor.constraint(equalToConstant: 25),
            activityIndicator.heightAnchor.constraint(equalToConstant: 25)
        ]
        [tableViewConstraints, activityConstraint].forEach{NSLayoutConstraint.activate($0)}
    }
}

extension AlbumDetailsViewController: AlbumDetailsDisplayLogic {

    func displayAlbumImage(imageData: Data) {
        DispatchQueue.main.async {
            guard let cell = self.tableView.cellForRow(at: IndexPath(row: 0, section: 0)) as? AlbumMainInfoCell else {return}
            cell.setImage(image: imageData.getImage())
            self.albumImage = imageData.getImage()
        }
    }
    
    func displayDefaultImage() {
        guard let cell = tableView.cellForRow(at: IndexPath(row: 0, section: 0)) as? AlbumMainInfoCell else {return}
        DispatchQueue.main.async {
            cell.setImage(image: UIImage(systemName: "nosign")!)
            self.albumImage = UIImage(systemName: "nosign")
        }
    }
    
    func displayAlert(with text: String) {
        DispatchQueue.main.async {
            self.showAlert(title: "Error", message: text) {
                self.navigationController?.popViewController(animated: true)
            }
        }
    }

    func displayAlbumDetails(viewModel: AlbumDetails.ShowAlbumDetails.ViewModel) {
        interactor?.showAlbumImage(imageURL: viewModel.imageURL)
        albumTitle = viewModel.albumTitle
        artist = viewModel.artist
        albumDescription = viewModel.details
        songs = viewModel.songs
        DispatchQueue.main.async {
            self.tableView.reloadData()
            self.activityIndicator.stopAnimating()
        }
    }
}

//MARK: Table view
extension AlbumDetailsViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return songs.isEmpty ? 0 : songs.count + 1
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if indexPath.row == 0 {
            let cell = tableView.dequeueReusableCell(withIdentifier: detailsCellID, for: indexPath) as! AlbumMainInfoCell
            cell.configureCell(title: albumTitle, artist: artist, details: albumDescription, image: albumImage)
            return cell
        }
        let cell = tableView.dequeueReusableCell(withIdentifier: standartCellID, for: indexPath)
        cell.textLabel?.text = songs[indexPath.row - 1]
        cell.textLabel?.numberOfLines = 0
        cell.selectionStyle = .none
        return cell
    }


}
