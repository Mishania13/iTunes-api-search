//
//  AlbumInfoViewController.swift
//  ItunesSearcher
//
//  Created by Михаил Звягинцев on 25.10.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AlbumInfoDisplayLogic: AnyObject {
    
    func displayAlbumImage(viewModel: AlbumInfo.ShowAlbumCellCell.ViewModel)
    func displayDefaultImage()
}

class AlbumInfoCollectionViewCell: UICollectionViewCell {

    private var albumImageView = UIImageView()
    private var albumTitleLabel = UILabel()
    private var activityIndicator = UIActivityIndicatorView()
    var imageURL = ""

    var interactor: AlbumInfoBusinessLogic?

    override init(frame: CGRect) {
        super.init(frame: frame)
        AlbumInfoConfigurator.shared.configure(with: self)
        backgroundColor = .clear
        [albumImageView, albumTitleLabel, activityIndicator].forEach{addSubview($0)}
        layoutViews()
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    override func prepareForReuse() {
        albumImageView.image = nil
        albumTitleLabel.text = nil
        imageURL = ""
    }
    private func layoutViews() {
        [albumImageView, albumTitleLabel].forEach{$0.translatesAutoresizingMaskIntoConstraints = false}
        let imageConstraints = [
            albumImageView.topAnchor.constraint(equalTo: topAnchor),
            albumImageView.leadingAnchor.constraint(equalTo: leadingAnchor),
            albumImageView.trailingAnchor.constraint(equalTo: trailingAnchor),
            albumImageView.heightAnchor.constraint(equalToConstant: frame.width)
        ]
        let labelConstraints = [
            albumTitleLabel.topAnchor.constraint(equalTo: albumImageView.bottomAnchor),
            albumTitleLabel.leadingAnchor.constraint(equalTo: leadingAnchor),
            albumTitleLabel.trailingAnchor.constraint(equalTo: trailingAnchor),
            albumTitleLabel.bottomAnchor.constraint(equalTo: bottomAnchor)
        ]

        [imageConstraints, labelConstraints].forEach{NSLayoutConstraint.activate($0)}
    }

    func configure(albumURL: String, albumTitle: String, artist: String) {

        activityIndicator.frame.size = CGSize(width: 25, height: 25)
        activityIndicator.center = CGPoint(x: frame.width/2, y: frame.width/2)
        activityIndicator.hidesWhenStopped = true
        activityIndicator.startAnimating()

        albumTitleLabel.numberOfLines = 0
        albumTitleLabel.font = UIFont.systemFont(ofSize: 17, weight: .semibold)
        albumTitleLabel.textAlignment = .center
        albumTitleLabel.text = artist + " " + albumTitle

        albumImageView.layer.cornerRadius = 8
        albumImageView.clipsToBounds = true

        interactor?.showAlbumImage(request: AlbumInfo.ShowAlbumCellCell.Request(imageUrl: albumURL))
    }
}

extension AlbumInfoCollectionViewCell: AlbumInfoDisplayLogic {

    func displayAlbumImage(viewModel: AlbumInfo.ShowAlbumCellCell.ViewModel) {
            DispatchQueue.main.async {
                self.activityIndicator.stopAnimating()
                self.albumImageView.image = UIImage(data: viewModel.imageData)
        }
    }

    func displayDefaultImage() {
        DispatchQueue.main.async {
            self.activityIndicator.stopAnimating()
            self.albumImageView.image = UIImage(systemName: "nosign")
        }
    }
}
